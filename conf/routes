# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.NetrunnerController.cards

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

# Renders the imprint
GET     /imprint    controllers.ImprintController.getImprint

# Renders the imprint
GET     /imprint/   controllers.ImprintController.getImprint


# A page where later the NetRunner deck builder should run
GET     /netrunner                  controllers.NetrunnerController.cards

# A page where later the NetRunner deck builder should run
GET     /netrunner/                  controllers.NetrunnerController.cards

# Renders a random generated starter deck
GET     /netrunner/starter/runner    controllers.NetrunnerController.starterRunner

# Renders a random generated starter deck
GET     /netrunner/starter/runner/    controllers.NetrunnerController.starterRunner

# Renders a random generated starter deck
GET     /netrunner/starter/corporation    controllers.NetrunnerController.starterCorporation

# Renders a random generated starter deck
GET     /netrunner/starter/corporation/    controllers.NetrunnerController.starterCorporation

# Renders a random generated limited booster
GET     /netrunner/booster/limited    controllers.NetrunnerController.boosterLimited

# Renders a random generated limited booster
GET     /netrunner/booster/limited/    controllers.NetrunnerController.boosterLimited

# Renders a random generated proteus booster
GET     /netrunner/booster/proteus    controllers.NetrunnerController.boosterProteus

# Renders a random generated proteus booster
GET     /netrunner/booster/proteus/    controllers.NetrunnerController.boosterProteus

# Renders a random generated classic booster
GET     /netrunner/booster/classic    controllers.NetrunnerController.boosterClassic

# Renders a random generated classic booster
GET     /netrunner/booster/classic/    controllers.NetrunnerController.boosterClassic


#
# Json Rest API
#

# A Json containing the cards with the given ID
GET     /netrunner/rest/card/$id<[0-9]+>                controllers.NetrunnerRestController.card(id: Int)

# A Json containing all cards
GET     /netrunner/rest/cards                  controllers.NetrunnerRestController.allCards

# A Json containing all cards
GET     /netrunner/rest/cards/ids/$idList<(\d{1,3},)*\d{1,3}>                   controllers.NetrunnerRestController.cards(idList: String)

# A Json containing a random generated starter deck
GET     /netrunner/rest/starter/runner    controllers.NetrunnerRestController.starterRunner

# A Json containing a random generated starter deck
GET     /netrunner/rest/starter/runner/    controllers.NetrunnerRestController.starterRunner

# A Json containing a random generated starter deck
GET     /netrunner/rest/starter/corporation    controllers.NetrunnerRestController.starterCorporation

# A Json containing a random generated starter deck
GET     /netrunner/rest/starter/corporation/    controllers.NetrunnerRestController.starterCorporation

# A Json containing a random generated limited booster
GET     /netrunner/rest/booster/limited    controllers.NetrunnerRestController.boosterLimited

# A Json containing a random generated limited booster
GET     /netrunner/rest/booster/limited/    controllers.NetrunnerRestController.boosterLimited

# A Json containing a random generated proteus booster
GET     /netrunner/rest/booster/proteus    controllers.NetrunnerRestController.boosterProteus

# A Json containing a random generated proteus booster
GET     /netrunner/rest/booster/proteus/    controllers.NetrunnerRestController.boosterProteus

# A Json containing a random generated classic booster
GET     /netrunner/rest/booster/classic    controllers.NetrunnerRestController.boosterClassic

# A Json containing a random generated classic booster
GET     /netrunner/rest/booster/classic/    controllers.NetrunnerRestController.boosterClassic

# User management

GET     /register                           controllers.UserController.register

POST    /user/add                           controllers.UserController.addUser

GET     /user/delete/:id                    controllers.UserController.deleteUser(id: Long)

GET     /login                              controllers.UserController.login(loginFailed: Option[Boolean])

POST    /login                              controllers.UserController.authenticate

GET     /logout                             controllers.UserController.logout

# Links to the admin area

GET /admin                                  controllers.AdminController.index